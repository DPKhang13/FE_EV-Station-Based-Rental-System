import React, { useState, useEffect } from "react";
import { orderService, authService } from "../services";
import "./XacThucKhachHang.css";
import PopupXacThucHoSoCaNhan from "../components/staff/PopupXacThucHoSoCaNhan";

const BOOKING_STATUSES = new Set(["DEPOSITED", "RENTAL", "COMPLETED"]);

const fmtVN = (dateStr) => {
  const d = new Date(dateStr);
  return isNaN(d.getTime()) ? "N/A" : d.toLocaleString("vi-VN");
};
const fmtRange = (start, end) => `${fmtVN(start)} - ${fmtVN(end)}`;

const XacThucKhachHangPage = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRow, setSelectedRow] = useState(null);
  const [popupType, setPopupType] = useState(null);
  const [hoSoDatXe, setHoSoDatXe] = useState([]);
  const [loading, setLoading] = useState(true);

  const [selectedProfile, setSelectedProfile] = useState(null);
  const [profileLoading, setProfileLoading] = useState(false);
  const [profileError, setProfileError] = useState(null);
  const [verifyLoading, setVerifyLoading] = useState(false);

  const loadOrders = async () => {
  try {
    setLoading(true);
    const res = await orderService.getPendingOrders();
    const arr = Array.isArray(res?.data) ? res.data : Array.isArray(res) ? res : [];
    setHoSoDatXe(arr);
  } catch (error) {
    console.error("‚ùå Error loading orders:", error);
    setHoSoDatXe([]);
  } finally {
    setLoading(false);
  }
};

useEffect(() => {
  loadOrders();
}, []);


  const filteredDatXe = hoSoDatXe.filter((item) =>
    (item.customerName || "").toLowerCase().includes(searchTerm.toLowerCase()) ||
    (item.phone || "").includes(searchTerm) ||
    (item.orderId || "").toLowerCase().includes(searchTerm.toLowerCase())
  );

  // m·ªü popup + t·∫£i h·ªì s∆° ch·ªù x√°c th·ª±c theo userId
  const handleOpenXacThuc = async (row) => {
    setSelectedRow(row);
    setPopupType("caNhan");
    setProfileLoading(true);
    setProfileError(null);
    setSelectedProfile(null);

    try {
      const raw = await authService.getProfilePendingVerification();
      const list = Array.isArray(raw) ? raw : (raw?.data || raw?.items || []);
      const profile = list.find((p) => p.userId === row.userId) || null;
      setSelectedProfile(profile);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i h·ªì s∆° ch·ªù x√°c th·ª±c:", err);
      setProfileError("Kh√¥ng t·∫£i ƒë∆∞·ª£c h·ªì s∆° ch·ªù x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setProfileLoading(false);
    }
  };
  // üöó B√†n giao xe (pickup)
const handleBanGiaoXe = async (row) => {
  if (!row?.orderId) return;

  if (!window.confirm(`X√°c nh·∫≠n b√†n giao xe cho kh√°ch h√†ng ${row.customerName}?`)) {
    return;
  }

  try {
    // G·ªçi API pickup
    await orderService.pickup(row.orderId, {
      note: "B√†n giao xe cho kh√°ch h√†ng", // b·∫°n c√≥ th·ªÉ truy·ªÅn th√™m d·ªØ li·ªáu n·∫øu backend y√™u c·∫ßu
    });

    // ‚úÖ C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i trong FE
    setHoSoDatXe((prev) =>
      prev.map((r) =>
        r.orderId === row.orderId
          ? {
              ...r,
              status: "RENTAL",
              pickedUpAt: new Date().toISOString(), // ƒë·ªÉ hi·ªÉn th·ªã "ƒê√£ b√†n giao"
            }
          : r
      )
    );

    alert(`üöó ƒê√£ b√†n giao xe cho ${row.customerName}`);
  } catch (err) {
    console.error("‚ùå L·ªói khi b√†n giao xe:", err);
    alert("Kh√¥ng th·ªÉ b√†n giao xe. Vui l√≤ng th·ª≠ l·∫°i.");
  }
};


  // X√°c nh·∫≠n x√°c th·ª±c h·ªì s∆°: PUT /auth/verify-profile/{userId}
  const handleVerifyProfile = async () => {
    if (!selectedRow?.userId) return;
    setVerifyLoading(true);
    setProfileError(null);
    try {
      const updated = await authService.verifyProfileByUserId(selectedRow.userId);
      const updatedObj = Array.isArray(updated) ? updated[0] : updated;

      // 1) C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã trong b·∫£ng ƒë·ªÉ hi·ªán n√∫t "B√†n giao xe"
      setHoSoDatXe((prev) =>
      prev.map((r) =>
        r.userId === selectedRow.userId
          ? {
              ...r,
              profileVerified: true,
              userStatus: "ƒê√É X√ÅC TH·ª∞C (H·ªí S∆†)", // üî• c·∫≠p nh·∫≠t tr·∫°ng th√°i ngay
            }
          : r
      )
    );

      // 2) (tu·ª≥ ch·ªçn) n·∫øu v·∫´n mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i trong popup tr∆∞·ªõc khi ƒë√≥ng
      setSelectedProfile((prev) => ({
        ...(prev || {}),
        ...(updatedObj || {}),
        status: updatedObj?.status || "ACTIVE", // backend c·ªßa b·∫°n tr·∫£ "ACTIVE"
      }));

      // 3) ƒê√≥ng popup
      setPopupType(null);
      setSelectedRow(null);

      // 4) Th√¥ng b√°o
      alert("ƒê√£ x√°c th·ª±c h·ªì s∆° kh√°ch h√†ng.");
    } catch (err) {
      console.error("‚ùå X√°c th·ª±c h·ªì s∆° th·∫•t b·∫°i:", err);
      setProfileError("X√°c th·ª±c h·ªì s∆° th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setVerifyLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="xacThuc-container">
        <h1 className="title">X√°c th·ª±c kh√°ch h√†ng</h1>
        <div style={{ textAlign: "center", padding: "40px" }}>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="xacThuc-container">
        <h1 className="title">X√°c th·ª±c kh√°ch h√†ng</h1>
        <p className="subtitle">Ki·ªÉm tra gi·∫•y t·ªù v√† x·ª≠ l√Ω h·ªì s∆° ƒë·∫∑t xe</p>

        <input
          type="text"
          placeholder="üîç T√¨m ki·∫øm theo h·ªç t√™n, SƒêT, m√£ ƒë∆°n..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-box"
        />

        <div className="section">
          <h2>H·ªì s∆° ƒë·∫∑t xe c·∫ßn x·ª≠ l√Ω ({filteredDatXe.length})</h2>
          <table className="table">
            <thead>
              <tr>
                <th>M√É ƒê∆†N</th>
                <th>KH√ÅCH H√ÄNG</th>
                <th>XE THU√ä</th>
                <th>TH·ªúI GIAN THU√ä</th>
                <th>T·ªîNG TI·ªÄN</th>
                <th>X√ÅC TH·ª∞C H·ªí S∆†</th>
                <th>THAO T√ÅC</th>
              </tr>
            </thead>
            <tbody>
              {filteredDatXe.map((row) => {
                // ‚úÖ ƒê√É S·ª¨A: coi nh∆∞ "ƒë√£ x√°c th·ª±c" n·∫øu profileVerified = true
                const isProfileVerified =
  row.profileVerified === true ||
  row.userStatus?.includes("ƒê√É X√ÅC TH·ª∞C");
                const isVerified = isProfileVerified || ["COMPLETED", "RENTAL"].includes(row.status);

                const deposit =
                  typeof row.depositAmount === "number" && !isNaN(row.depositAmount)
                    ? row.depositAmount
                    : Math.round(Number(row.totalPrice || 0) * 0.3);

                return (
                  <tr key={row.orderId}>
                    <td>{row.orderId}</td>
                    <td>
                      {row.customerName || "Kh√°ch h√†ng"}
                      <br />
                      <span className="phone">{row.phone || "N/A"}</span>
                    </td>
                    <td>
                      {(row.vehicleName || "Xe")} ({row.plateNumber || "N/A"})
                    </td>
                    <td>{fmtRange(row.startTime, row.endTime)}</td>
                    <td>
                      {Number(row.totalPrice || 0).toLocaleString("vi-VN")} VND
                      <br />
                      <small>C·ªçc: {deposit.toLocaleString("vi-VN")} VND</small>
                    </td>
                    <td>
  <span
    className={`status ${
      row.userStatus?.includes("ƒê√É X√ÅC TH·ª∞C") ? "success" : "warning"
    }`}
  >
    {row.userStatus || "Kh√¥ng x√°c ƒë·ªãnh"}
  </span>

  {row.confirmedAt && (
    <>
      <br />
      <small>{fmtVN(row.confirmedAt)}</small>
    </>
  )}
  {row.pickedUpAt && (
    <>
      <br />
      <small>ƒê√£ b√†n giao: {fmtVN(row.pickedUpAt)}</small>
    </>
  )}
</td>

                   <td>
  {/* N·∫øu ƒë√£ b√†n giao r·ªìi ‚Üí ch·ªâ hi·ªán "ƒê√£ b√†n giao" */}
  {row.status === "RENTAL" ? (
    <button className="btn-secondary" disabled>
      ƒê√£ b√†n giao
    </button>
  ) : (
    <>
      {/* N·∫øu ch∆∞a x√°c th·ª±c ‚Üí hi·ªán n√∫t x√°c th·ª±c */}
      {!isVerified && (
        <button
          className="btn-primary"
          onClick={() => handleOpenXacThuc(row)}
        >
          X√°c th·ª±c h·ªì s∆°
        </button>
      )}

      {/* N·∫øu ƒë√£ x√°c th·ª±c h·ªì s∆° ‚Üí hi·ªán n√∫t b√†n giao */}
      {isVerified && (
        <button
          className="btn-success"
          onClick={() => handleBanGiaoXe(row)}
          style={{ marginLeft: 8 }}
        >
          B√†n giao xe
        </button>
      )}

      {/* N√∫t t·ª´ ch·ªëi b√†n giao (lu√¥n c√≥ n·∫øu ch∆∞a PICKED_UP) */}
      <button
        className="btn-danger"
        onClick={() => handleTuChoiBanGiao(row)}
        style={{ marginLeft: 8 }}
      >
        T·ª´ ch·ªëi b√†n giao
      </button>
    </>
  )}
</td>

                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>

      {popupType === "caNhan" && (
        <PopupXacThucHoSoCaNhan
          row={selectedRow}
          profile={selectedProfile}
          loading={profileLoading}
          error={profileError}
          verifying={verifyLoading}
          onVerify={handleVerifyProfile}
          onClose={() => setPopupType(null)}
        />
      )}
    </>
  );
};

export default XacThucKhachHangPage;
