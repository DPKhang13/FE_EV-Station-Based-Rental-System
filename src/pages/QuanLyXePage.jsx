import React, { useState, useEffect, useContext } from "react";
import vehicleService from "../services/vehicleService";
import maintenanceService from "../services/maintenanceService";
import "./QuanLyXePage.css";
import { AuthContext } from "../context/AuthContext";
import { rentalStationService } from "../services";

const QuanLyXePage = () => {
  const { user } = useContext(AuthContext);
  const [danhSachXe, setDanhSachXe] = useState([]);
  const [loading, setLoading] = useState(true);
  const [popupType, setPopupType] = useState(null);
  const [selectedXe, setSelectedXe] = useState(null);
  const [pinValue, setPinValue] = useState("");
  const [issueText, setIssueText] = useState("");
  const [incidentType, setIncidentType] = useState("");
  const [severity, setSeverity] = useState("");

  if (!user) return <p>ƒêang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng...</p>;
  const STATION_ID = user.stationId;

  // üì¶ L·∫•y danh s√°ch xe t·ª´ API
  const loadVehicles = async () => {
    try {
      setLoading(true);
      const vehicles = await vehicleService.fetchAndTransformVehicles();

      // Ch·ªâ l·∫•y xe c·ªßa tr·∫°m hi·ªán t·∫°i
      const filtered = vehicles.filter(
        (v) =>
          Number(v.stationId) === STATION_ID &&
          (v.status === "Available" || v.status === "Maintenance")
      );

      const transformed = filtered.map((v) => ({
        id: v.id,
        ten: v.vehicle_name || v.name,
        bienSo: v.plate_number,
        pin: v.battery_status
          ? parseInt(v.battery_status.replace("%", ""))
          : 100,
        trangThai:
          v.status === "Available"
            ? "C√≥ s·∫µn"
            : v.status === "Maintenance"
              ? "B·∫£o tr√¨"
              : "Kh√¥ng x√°c ƒë·ªãnh",
        statusRaw: v.status, // üÜï l∆∞u l·∫°i raw status g·ªëc
        hang: v.brand,
        tram: v.stationName,
        hinhAnh: v.image,
      }));

      setDanhSachXe(transformed);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i xe:", err);
      setDanhSachXe([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadVehicles();
  }, [STATION_ID]);

  // ‚ö° C·∫≠p nh·∫≠t pin
  const handleUpdatePin = async () => {
    if (!selectedXe || !pinValue) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ph·∫ßn trƒÉm pin!");
      return;
    }

    try {
      // üß© G·ªçi API c·∫≠p nh·∫≠t pin
      await rentalStationService.updateVehicleStatus(
        selectedXe.id,
        { status: selectedXe.statusRaw, battery: pinValue }
      );


      alert(
        `‚úÖ ƒê√£ c·∫≠p nh·∫≠t pin cho xe ${selectedXe.ten} (${selectedXe.bienSo}) th√†nh ${pinValue}%`
      );

      // Reload l·∫°i danh s√°ch xe
      await loadVehicles();
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t pin:", err);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t pin xe, vui l√≤ng th·ª≠ l·∫°i!");
    }

    setPopupType(null);
    setPinValue("");
    setSelectedXe(null);
  };

  // üß∞ B√°o c√°o s·ª± c·ªë
  const handleReportIssue = async () => {
    if (!selectedXe || !incidentType || !severity || !issueText.trim()) {
      alert("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin s·ª± c·ªë!");
      return;
    }

    try {
      const payload = {
        vehicleId: selectedXe.id,
        reportedBy: user.id,
        stationId: STATION_ID,
        incidentType,
        severity,
        description: issueText,
        status: "open",
        reportedAt: new Date().toISOString(),
      };

      await maintenanceService.create(payload);
      alert(
        `üì© ƒê√£ g·ª≠i b√°o c√°o s·ª± c·ªë cho xe ${selectedXe.ten} (${selectedXe.bienSo})`
      );
      setPopupType(null);
      setIssueText("");
      setIncidentType("");
      setSeverity("");
      setSelectedXe(null);
    } catch (err) {
      console.error("‚ùå L·ªói b√°o c√°o s·ª± c·ªë:", err);
      alert("Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  // üõ†Ô∏è ƒê∆∞a xe ƒëi b·∫£o tr√¨
  const handleSendMaintenance = async () => {
    if (!selectedXe) {
      alert("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y xe c·∫ßn b·∫£o tr√¨!");
      return;
    }

    try {
      const payload = {
        vehicleId: selectedXe.id,
        description: "ƒê∆∞a xe ƒëi b·∫£o tr√¨ ƒë·ªãnh k·ª≥",
        date: new Date().toISOString().split("T")[0],
        cost: 0,
      };

      await maintenanceService.create(payload);
      alert(
        `üõ†Ô∏è Xe ${selectedXe.ten} (${selectedXe.bienSo}) ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v√†o b·∫£o tr√¨!`
      );
      await rentalStationService.updateVehicleStatus(selectedXe.id, {
        status: "Maintenance",
        battery: `${selectedXe.pin}%`,
      });

      await loadVehicles();
      setPopupType(null);
      setSelectedXe(null);
    } catch (err) {
      console.error("‚ùå L·ªói ƒëem xe b·∫£o tr√¨:", err);
      alert("Kh√¥ng th·ªÉ ƒë∆∞a xe v√†o b·∫£o tr√¨!");
    }
  };

  return (
    <div className="quanlyxe-container">
      <h1>Qu·∫£n l√Ω xe t·∫°i tr·∫°m</h1>

      {loading ? (
        <p className="loading">ƒêang t·∫£i danh s√°ch xe...</p>
      ) : (
        <div className="xe-grid">
          {danhSachXe.map((xe) => (
            <div className="xe-card" key={xe.id}>
              <img
                src={
                  xe.hinhAnh ||
                  "https://live.staticflickr.com/65535/49932658111_30214a4229_b.jpg"
                }
                alt={xe.ten}
                className="xe-img"
              />
              <h3>{xe.ten}</h3>
              <p>Bi·ªÉn s·ªë: {xe.bienSo}</p>
              <p>Pin: {xe.pin}%</p>
              <p>H√£ng: {xe.hang}</p>
              <p
                className={`status ${xe.trangThai === "C√≥ s·∫µn" ? "green" : "yellow"
                  }`}
              >
                {xe.trangThai}
              </p>

              <div className="xe-actions">
                <button
                  className="btn-update"
                  onClick={() => {
                    setSelectedXe(xe);
                    setPopupType("pin");
                  }}
                >
                  ‚ö° Pin
                </button>
                <button
                  className="btn-report"
                  onClick={() => {
                    setSelectedXe(xe);
                    setPopupType("issue");
                  }}
                >
                  üß∞ S·ª± c·ªë
                </button>
                <button
                  className="btn-maintain"
                  onClick={() => {
                    setSelectedXe(xe);
                    setPopupType("maintain");
                  }}
                  disabled={xe.trangThai === "B·∫£o tr√¨"}
                >
                  üõ†Ô∏è B·∫£o tr√¨
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Popup c·∫≠p nh·∫≠t pin */}
      {popupType === "pin" && selectedXe && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h2>‚ö° C·∫≠p nh·∫≠t pin xe</h2>
            <p>
              <strong>{selectedXe.ten}</strong> ({selectedXe.bienSo})
            </p>

            <label>Nh·∫≠p ph·∫ßn trƒÉm pin m·ªõi:</label>
            <input
              type="number"
              placeholder="VD: 80"
              value={pinValue}
              onChange={(e) => setPinValue(e.target.value)}
            />

            <div className="popup-buttons">
              <button onClick={() => setPopupType(null)}>H·ªßy</button>
              <button className="btn-confirm" onClick={handleUpdatePin}>
                C·∫≠p nh·∫≠t
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Popup b√°o c√°o s·ª± c·ªë */}
      {popupType === "issue" && selectedXe && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h2>üß∞ B√°o c√°o s·ª± c·ªë</h2>
            <p>
              <strong>{selectedXe.ten}</strong> ({selectedXe.bienSo})
            </p>

            <label>Lo·∫°i s·ª± c·ªë:</label>
            <select
              value={incidentType}
              onChange={(e) => setIncidentType(e.target.value)}
            >
              <option value="">-- Ch·ªçn lo·∫°i --</option>
              <option value="mechanical">C∆° kh√≠</option>
              <option value="software">Ph·∫ßn m·ªÅm</option>
              <option value="accident">Tai n·∫°n</option>
              <option value="battery">Pin</option>
              <option value="other">Kh√°c</option>
            </select>

            <label>M·ª©c ƒë·ªô h∆∞ t·ªïn:</label>
            <select
              value={severity}
              onChange={(e) => setSeverity(e.target.value)}
            >
              <option value="">-- Ch·ªçn m·ª©c ƒë·ªô --</option>
              <option value="low">Th·∫•p</option>
              <option value="medium">Trung b√¨nh</option>
              <option value="high">Cao</option>
              <option value="critical">Nghi√™m tr·ªçng</option>
            </select>

            <label>M√¥ t·∫£ s·ª± c·ªë:</label>
            <textarea
              rows="3"
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt..."
              value={issueText}
              onChange={(e) => setIssueText(e.target.value)}
            ></textarea>

            <div className="popup-buttons">
              <button onClick={() => setPopupType(null)}>H·ªßy</button>
              <button className="btn-confirm" onClick={handleReportIssue}>
                G·ª≠i b√°o c√°o
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Popup ƒëem b·∫£o tr√¨ */}
      {popupType === "maintain" && selectedXe && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h2>üõ†Ô∏è ƒêem xe ƒëi b·∫£o tr√¨</h2>
            <p>
              <strong>{selectedXe.ten}</strong> ({selectedXe.bienSo})
            </p>
            <p className="warning-text">
              ‚ö†Ô∏è Xe sau khi chuy·ªÉn sang ‚ÄúB·∫£o tr√¨‚Äù s·∫Ω kh√¥ng th·ªÉ cho thu√™!
            </p>

            <div className="popup-buttons">
              <button onClick={() => setPopupType(null)}>H·ªßy</button>
              <button className="btn-confirm" onClick={handleSendMaintenance}>
                X√°c nh·∫≠n ƒëem b·∫£o tr√¨
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuanLyXePage;
