import React, { useState, useEffect } from "react";
import vehicleService from "../services/vehicleService";
import "./QuanLyXePage.css";

const QuanLyXePage = () => {
  const [danhSachXe, setDanhSachXe] = useState([]);
  const [loading, setLoading] = useState(true);
  const [popupType, setPopupType] = useState(null);
  const [selectedXeId, setSelectedXeId] = useState("");
  const [pinValue, setPinValue] = useState("");
  const [issueText, setIssueText] = useState("");

  const STATION_ID = 1;

  useEffect(() => {
    const loadData = async () => {
      try {
        const vehicles = await vehicleService.fetchAndTransformVehicles();

        // Ch·ªâ l·∫•y xe c√≥ s·∫µn v√† b·∫£o tr√¨
        const filtered = vehicles.filter(
          (v) =>
            Number(v.stationId) === STATION_ID &&
            (v.status === "Available" || v.status === "Maintenance")
        );

        const transformed = filtered.map((v) => ({
          id: v.id,
          ten: v.vehicle_name || v.name,
          bienSo: v.plate_number,
          pin: v.battery_status
            ? parseInt(v.battery_status.replace("%", ""))
            : 100,
          trangThai:
            v.status === "Available"
              ? "C√≥ s·∫µn"
              : v.status === "Maintenance"
              ? "B·∫£o tr√¨"
              : "Kh√¥ng x√°c ƒë·ªãnh",
          hang: v.brand,
          tram: v.stationName,
          hinhAnh: v.image,
        }));

        setDanhSachXe(transformed);
      } catch (err) {
        console.error("‚ùå L·ªói t·∫£i xe:", err);
        setDanhSachXe([]);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  // C·∫≠p nh·∫≠t pin
  const handleUpdatePin = () => {
    alert(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t pin xe ${selectedXeId} th√†nh ${pinValue}%`);
    setPopupType(null);
  };

  // B√°o c√°o s·ª± c·ªë
  const handleReportIssue = () => {
    alert(`üì© B√°o c√°o s·ª± c·ªë cho xe ${selectedXeId}: ${issueText}`);
    setPopupType(null);
  };

  // ƒê∆∞a xe ƒëi b·∫£o tr√¨
  const handleSendMaintenance = () => {
    alert(`üõ†Ô∏è Xe ${selectedXeId} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i b·∫£o tr√¨!`);
    setPopupType(null);
  };

  return (
    <div className="quanlyxe-container">
      <h1>Qu·∫£n l√Ω xe t·∫°i tr·∫°m</h1>

      {/* N√∫t thao t√°c */}
      <div className="button-group">
        <button className="btn-update" onClick={() => setPopupType("pin")}>
          ‚ö° C·∫≠p nh·∫≠t pin
        </button>
        <button className="btn-report" onClick={() => setPopupType("issue")}>
          üß∞ B√°o c√°o s·ª± c·ªë
        </button>
        <button className="btn-maintain" onClick={() => setPopupType("maintain")}>
          üõ†Ô∏è ƒêem b·∫£o tr√¨
        </button>
      </div>

      {/* Danh s√°ch xe */}
      {loading ? (
        <p className="loading">ƒêang t·∫£i danh s√°ch xe...</p>
      ) : (
        <div className="xe-grid">
          {danhSachXe.map((xe) => (
            <div className="xe-card" key={xe.id}>
              <img
                src={
                  xe.hinhAnh ||
                  "https://live.staticflickr.com/65535/49932658111_30214a4229_b.jpg"
                }
                alt={xe.ten}
                className="xe-img"
              />
              <h3>{xe.ten}</h3>
              <p>Bi·ªÉn s·ªë: {xe.bienSo}</p>
              <p>Pin: {xe.pin}%</p>
              <p>H√£ng: {xe.hang}</p>
              <p
                className={`status ${
                  xe.trangThai === "C√≥ s·∫µn" ? "green" : "yellow"
                }`}
              >
                {xe.trangThai}
              </p>
            </div>
          ))}
        </div>
      )}

      {/* Popup C·∫≠p nh·∫≠t pin */}
      {popupType === "pin" && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h2>‚ö° C·∫≠p nh·∫≠t t√¨nh tr·∫°ng pin</h2>
            <label>Ch·ªçn xe:</label>
            <select
              value={selectedXeId}
              onChange={(e) => setSelectedXeId(e.target.value)}
            >
              <option value="">-- Ch·ªçn xe --</option>
              {danhSachXe.map((xe) => (
                <option key={xe.id} value={xe.id}>
                  {xe.ten} ({xe.bienSo})
                </option>
              ))}
            </select>

            <label>Nh·∫≠p ph·∫ßn trƒÉm pin m·ªõi:</label>
            <input
              type="number"
              placeholder="VD: 80"
              value={pinValue}
              onChange={(e) => setPinValue(e.target.value)}
            />

            <div className="popup-buttons">
              <button onClick={() => setPopupType(null)}>H·ªßy</button>
              <button className="btn-confirm" onClick={handleUpdatePin}>
                C·∫≠p nh·∫≠t
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Popup B√°o c√°o s·ª± c·ªë */}
      {popupType === "issue" && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h2>üß∞ B√°o c√°o s·ª± c·ªë</h2>
            <label>Ch·ªçn xe b·ªã s·ª± c·ªë:</label>
            <select
              value={selectedXeId}
              onChange={(e) => setSelectedXeId(e.target.value)}
            >
              <option value="">-- Ch·ªçn xe --</option>
              {danhSachXe.map((xe) => (
                <option key={xe.id} value={xe.id}>
                  {xe.ten} ({xe.bienSo})
                </option>
              ))}
            </select>

            <label>M√¥ t·∫£ s·ª± c·ªë:</label>
            <textarea
              rows="3"
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt..."
              value={issueText}
              onChange={(e) => setIssueText(e.target.value)}
            ></textarea>

            <div className="popup-buttons">
              <button onClick={() => setPopupType(null)}>H·ªßy</button>
              <button className="btn-confirm" onClick={handleReportIssue}>
                G·ª≠i b√°o c√°o
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Popup ƒêem b·∫£o tr√¨ */}
      {popupType === "maintain" && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h2>üõ†Ô∏è ƒêem xe ƒëi b·∫£o tr√¨</h2>
            <label>Ch·ªçn xe c·∫ßn ƒëem b·∫£o tr√¨:</label>
            <select
              value={selectedXeId}
              onChange={(e) => setSelectedXeId(e.target.value)}
            >
              <option value="">-- Ch·ªçn xe --</option>
              {danhSachXe
                .filter((xe) => xe.trangThai === "C√≥ s·∫µn")
                .map((xe) => (
                  <option key={xe.id} value={xe.id}>
                    {xe.ten} ({xe.bienSo})
                  </option>
                ))}
            </select>

            <p className="warning-text">
              ‚ö†Ô∏è Xe sau khi chuy·ªÉn sang ‚ÄúB·∫£o tr√¨‚Äù s·∫Ω kh√¥ng th·ªÉ cho thu√™!
            </p>

            <div className="popup-buttons">
              <button onClick={() => setPopupType(null)}>H·ªßy</button>
              <button className="btn-confirm" onClick={handleSendMaintenance}>
                X√°c nh·∫≠n ƒëem b·∫£o tr√¨
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuanLyXePage;
