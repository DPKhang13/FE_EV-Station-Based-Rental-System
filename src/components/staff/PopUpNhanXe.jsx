import React, { useState } from "react";
import maintenanceService from "../../services/maintenanceService";
import vehicleService from "../../services/vehicleService";
import "./PopupNhanXe.css";

const PopupNhanXe = ({ xe, onClose }) => {
  const maintenanceOptions = [
    { id: 1, description: "Ki·ªÉm tra h·ªá th·ªëng pin", cost: 500000 },
    { id: 2, description: "B·∫£o d∆∞·ª°ng phanh", cost: 350000 },
    { id: 3, description: "Thay l·ªëp", cost: 800000 },
    { id: 4, description: "Hi·ªáu ch·ªânh ƒë·ªông c∆° ƒëi·ªán", cost: 600000 },
    { id: 5, description: "V·ªá sinh c·ªïng s·∫°c", cost: 200000 },
    { id: 6, description: "V·ªá sinh n·ªôi th·∫•t", cost: 150000 },
    { id: 7, description: "C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm", cost: 100000 },
    { id: 8, description: "Ki·ªÉm tra h·ªá th·ªëng treo", cost: 450000 },
    { id: 9, description: "Thay ƒë√®n pha", cost: 700000 },
    { id: 10, description: "Ki·ªÉm tra t·ªïng th·ªÉ", cost: 900000 },
  ];

  const [selectedItems, setSelectedItems] = useState([]);
  const [isPaid, setIsPaid] = useState(false); // ‚úÖ tr·∫°ng th√°i ƒë√£ thanh to√°n
  const [loading, setLoading] = useState(false);

  const handleToggle = (id) => {
    setSelectedItems((prev) =>
      prev.includes(id)
        ? prev.filter((item) => item !== id)
        : [...prev, id]
    );
  };

  const totalCost = selectedItems
    .map((id) => maintenanceOptions.find((m) => m.id === id)?.cost || 0)
    .reduce((a, b) => a + b, 0);

  const handleConfirm = async () => {
    try {
      setLoading(true);

      // N·∫øu ch∆∞a thanh to√°n, kh√¥ng cho x√°c nh·∫≠n
      if (!isPaid) {
        alert("‚ö†Ô∏è Vui l√≤ng x√°c nh·∫≠n r·∫±ng kh√°ch h√†ng ƒë√£ thanh to√°n tr∆∞·ªõc khi ho√†n t·∫•t!");
        return;
      }

      // üü¢ Kh√¥ng tick g√¨ -> ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i Available
      if (selectedItems.length === 0) {
        await vehicleService.updateStatus(xe.id, { status: "Available" });
        alert(`‚úÖ Xe ${xe.ten} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "C√≥ s·∫µn".`);
        onClose();
        return;
      }

      // üîµ C√≥ tick -> t·∫°o ƒë∆°n b·∫£o tr√¨ + chuy·ªÉn sang "Maintenance"
      for (const id of selectedItems) {
        const option = maintenanceOptions.find((m) => m.id === id);
        const payload = {
          vehicleId: xe.id,
          description: option.description,
          date: new Date().toISOString().split("T")[0],
          cost: option.cost,
        };

        await maintenanceService.create(payload);
        console.log("ƒê√£ t·∫°o ƒë∆°n:", payload);
      }

      await vehicleService.updateStatus(xe.id, { status: "Maintenance" });

      alert(
        `üõ†Ô∏è ƒê√£ t·∫°o ${selectedItems.length} ƒë∆°n b·∫£o tr√¨ cho xe ${xe.ten}.\n` +
          `T·ªïng ph√≠ ph√°t sinh: ${totalCost.toLocaleString()} ‚Ç´\n` +
          `Tr·∫°ng th√°i xe ƒë√£ chuy·ªÉn th√†nh "B·∫£o tr√¨".`
      );
      onClose();
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω nh·∫≠n xe:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu, vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="popup-overlay">
      <div className="popup-content popup-maintenance">
        <h2>üöó Nh·∫≠n xe tr·∫£: {xe.ten}</h2>
        <p>Bi·ªÉn s·ªë: <strong>{xe.bienSo}</strong></p>
        <p>H√£ng: <strong>{xe.hang}</strong></p>
        <hr />

        <h3>üßæ Ch·ªçn h·∫°ng m·ª•c b·∫£o tr√¨ c·∫ßn t·∫°o (n·∫øu c√≥)</h3>

        <div className="checklist-container">
          {maintenanceOptions.map((item) => (
            <label
              key={item.id}
              className={`check-item ${
                selectedItems.includes(item.id) ? "checked" : ""
              }`}
            >
              <input
                type="checkbox"
                checked={selectedItems.includes(item.id)}
                onChange={() => handleToggle(item.id)}
              />
              <span>{item.description}</span>
              <span className="cost">{item.cost.toLocaleString()} ‚Ç´</span>
            </label>
          ))}
        </div>

        <div className="total">
          <strong>T·ªïng chi ph√≠ ph√°t sinh:</strong>{" "}
          <span className="cost">{totalCost.toLocaleString()} ‚Ç´</span>
        </div>

        <div className="payment-confirm">
          <label>
            <input
              type="checkbox"
              checked={isPaid}
              onChange={(e) => setIsPaid(e.target.checked)}
            />
            ‚úÖ X√°c nh·∫≠n kh√°ch h√†ng ƒë√£ thanh to√°n
          </label>
        </div>

        <div className="popup-buttons">
          <button onClick={onClose} className="btn-cancel">
            H·ªßy
          </button>
          <button
            className="btn-confirm"
            onClick={handleConfirm}
            disabled={loading || !isPaid} // üîí Ch·ªâ b·∫≠t khi ƒë√£ thanh to√°n
          >
            {loading ? "ƒêang x·ª≠ l√Ω..." : "Ho√†n t·∫•t nh·∫≠n xe"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default PopupNhanXe;
