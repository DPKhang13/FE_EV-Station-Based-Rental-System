// Service ƒë·ªÉ k·∫øt n·ªëi v·ªõi Vehicle API
// Import images at top
import image4Seater from '../assets/4standard.jpg';
import image7Seater from '../assets/7standard.jpg';

const API_BASE_URL = 'http://localhost:8080/api';

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ xe t·ª´ API
 * @returns {Promise<Array>} Danh s√°ch xe
 */
export const getVehicles = async () => {
    try {
        const token = localStorage.getItem('accessToken');

        console.log('üöÄ [API] ƒêang g·ªçi API:', `${API_BASE_URL}/vehicles/get`);
        console.log('üîë [API] Token:', token ? 'C√ì TOKEN ‚úÖ' : 'KH√îNG C√ì TOKEN (OK - API n√†y kh√¥ng c·∫ßn token)');

        // API GET /api/vehicles/get KH√îNG C·∫¶N authentication theo docs
        // Nh∆∞ng v·∫´n g·ª≠i token n·∫øu c√≥ (ƒë·ªÉ l·∫•y th√™m info n·∫øu logged in)
        const headers = {
            'Content-Type': 'application/json'
        };

        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }

        const response = await fetch(`${API_BASE_URL}/vehicles/get`, {
            method: 'GET',
            headers: headers
        });

        console.log('üì° [API] Response status:', response.status);
        console.log('üì° [API] Response OK:', response.ok);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [API] Error response:', errorText);
            throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('‚úÖ [API] Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ backend:', data.length, 'xe');
        console.log('üìä [API] Sample data:', data.length > 0 ? data[0] : 'No data');

        if (!Array.isArray(data)) {
            console.error('‚ùå [API] Data kh√¥ng ph·∫£i array:', typeof data);
            return [];
        }

        return data;
    } catch (error) {
        console.error('‚ùå [API] L·ªói khi g·ªçi API:', error.message);
        console.error('‚ùå [API] Chi ti·∫øt l·ªói:', error);
        console.error('‚ùå [API] Stack:', error.stack);

        // Check if it's CORS error
        if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
            console.error('üö´ [API] C√≥ th·ªÉ l√† l·ªói CORS! Ki·ªÉm tra backend CORS config');
        }

        throw error;
    }
};

/**
 * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API th√†nh format c·ªßa frontend
 * @param {Object} apiVehicle - D·ªØ li·ªáu xe t·ª´ API
 * @returns {Object} D·ªØ li·ªáu xe theo format frontend
 */
export const transformVehicleData = (apiVehicle) => {
    // Map API data to frontend format
    return {
        id: apiVehicle.vehicleId,
        vehicle_id: apiVehicle.vehicleId.toString(),
        vehicle_name: apiVehicle.vehicleName,
        brand: apiVehicle.brand,
        name: apiVehicle.vehicleName,
        // X√°c ƒë·ªãnh image d·ª±a v√†o s·ªë gh·∫ø
        image: getVehicleImage(apiVehicle.seatCount),
        // X√°c ƒë·ªãnh type d·ª±a v√†o s·ªë gh·∫ø
        type: apiVehicle.seatCount <= 5 ? '4-seater' : '7-seater',
        seat_count: apiVehicle.seatCount,
        grade: apiVehicle.variant,
        color: apiVehicle.color,
        year_of_manufacture: apiVehicle.year,
        plate_number: apiVehicle.plateNumber,
        status: mapStatus(apiVehicle.status),
        description: apiVehicle.description,
        branch: apiVehicle.stationId?.toString() || '1',
        transmission: apiVehicle.transmission,
        variant: apiVehicle.variant,
        battery_status: apiVehicle.batteryStatus,
        battery_capacity: apiVehicle.batteryCapacity,
        range_km: apiVehicle.rangeKm,
        // Th√¥ng tin b·ªï sung
        stationId: apiVehicle.stationId,
        stationName: apiVehicle.stationName,
        pricingRuleId: apiVehicle.pricingRuleId
    };
};

/**
 * Map status t·ª´ API sang format frontend
 */
const mapStatus = (apiStatus) => {
    // API tr·∫£ v·ªÅ lowercase: 'available', 'rented', 'maintenance'
    const statusMap = {
        'available': 'Available',
        'rented': 'Rented',
        'maintenance': 'Maintenance',
        'reserved': 'Reserved',
        // Fallback cho uppercase (n·∫øu c√≥)
        'AVAILABLE': 'Available',
        'RENTED': 'Rented',
        'MAINTENANCE': 'Maintenance',
        'RESERVED': 'Reserved'
    };
    return statusMap[apiStatus] || apiStatus;
};

/**
 * L·∫•y image ph√π h·ª£p d·ª±a v√†o s·ªë gh·∫ø
 */
const getVehicleImage = (seatCount) => {
    // Use imported images (ES6 style)
    return seatCount <= 5 ? image4Seater : image7Seater;
};

/**
 * L·∫•y v√† transform t·∫•t c·∫£ xe
 */
export const fetchAndTransformVehicles = async () => {
    try {
        const vehicles = await getVehicles();
        return vehicles.map(transformVehicleData);
    } catch (error) {
        console.error('L·ªói khi fetch v√† transform vehicles:', error);
        // Tr·∫£ v·ªÅ array r·ªóng n·∫øu c√≥ l·ªói
        return [];
    }
};

// Default export cho vehicleService object
const vehicleService = {
    getVehicles,
    transformVehicleData,
    fetchAndTransformVehicles
};

export default vehicleService;
